
pipeline {
    agent any // Runs the pipeline on any available agent

    environment {
        DOCKER_BUILDKIT = '1' // Enables BuildKit for better Docker builds
        SONARQUBE_URL = 'http://192.168.156.25:9000' // URL for SonarQube server
        SONARQUBE_TOKEN = credentials('sonarqube-token') // Retrieves SonarQube token credentials from Jenkins credentials store
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials' // Docker Hub credentials ID for Docker login
        TRIVY_VERSION = '0.53.0' // Version of Trivy to use for image scanning
        DOCKER_REPO = 'syahridan/devops_avengers' // Docker repository name where the image will be pushed
    }

    stages {
        stage('Checkout') {
            steps {
                // Clones the repository from GitHub
                git 'https://github.com/muxika21/DevOps_Avenger_CICD.git'
            }
        }

        stage('Install Dependencies and Unit Test') {
            steps {
                script {
                    // Changes directory to 'backend' where the Node.js application resides
                    dir('backend') {
                        // Installs Node.js dependencies
                        sh 'npm install'
                        // Runs unit tests defined in the package.json
                        sh 'npm test'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Changes directory to 'backend' for SonarQube analysis
                    dir('backend') {
                        // Uses SonarQube credentials to perform the analysis
                        withSonarQubeEnv('SonarQube') {
                            // Installs SonarQube Scanner globally
                            sh 'npm install -g sonar-scanner'
                            // Runs the SonarQube analysis with specific project details
                            sh '''
                                sonar-scanner \
                                -Dsonar.projectKey=DevOps_Avenger_CICD \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    // Builds the Docker image as defined in docker-compose.yml
                    sh 'docker-compose build'
                }
            }
        }

        stage('Trivy Image Scanning') {
            steps {
                script {
                    sh '''
                        # Download and extract Trivy if it's not already installed
                        if ! command -v trivy &> /dev/null
                        then
                            wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-x86_64.tar.gz
                            tar zxvf trivy_${TRIVY_VERSION}_Linux-x86_64.tar.gz
                            mv trivy /usr/local/bin/
                        fi

                        # Perform the image scan for vulnerabilities
                        # `--no-progress` suppresses progress bars, `--exit-code 1` makes the build fail on vulnerabilities, `--severity HIGH,CRITICAL` limits the report to high and critical issues
                        trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_REPO}:latest
                    '''
                }
            }
        }

        stage('Docker Hub Image Push') {
            steps {
                script {
                    // Log in to Docker Hub using the credentials specified in Jenkins
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            # Log in to Docker Hub with provided username and password
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

                            # Tag the Docker image with a build number
                            docker tag ${DOCKER_REPO}:latest ${DOCKER_REPO}:build-${env.BUILD_NUMBER}

                            # Push the tagged Docker image to Docker Hub
                            docker push ${DOCKER_REPO}:build-${env.BUILD_NUMBER}
                        '''
                    }
                }
            }
        }

        stage('JMeter Performance Testing') {
            steps {
                script {
                    sh '''
                        # Download and extract Apache JMeter if it's not already installed
                        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
                        tar -xvf apache-jmeter-5.5.tgz

                        # Run the JMeter test plan
                        # Assumes the JMeter test plan file is located at `jmeter/test-plan.jmx`
                        ./apache-jmeter-5.5/bin/jmeter -n -t jmeter/test-plan.jmx -l jmeter/results.jtl
                        # Add commands to analyze results if needed
                    '''
                }
            }
        }
    }

    post {
        always {
            // This stage runs after all other stages, regardless of success or failure
            script {
                // Stops and removes the Docker containers created by `docker-compose up`
                sh 'docker-compose down'
            }
        }
    }
}
